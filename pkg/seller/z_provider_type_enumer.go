// Code generated by "enumer -type=ProviderType -transform=kebab -text -yaml -output=z_provider_type_enumer.go"; DO NOT EDIT.

//
package seller

import (
	"fmt"
)

const _ProviderTypeName = "emailsms"

var _ProviderTypeIndex = [...]uint8{0, 5, 8}

func (i ProviderType) String() string {
	if i < 0 || i >= ProviderType(len(_ProviderTypeIndex)-1) {
		return fmt.Sprintf("ProviderType(%d)", i)
	}
	return _ProviderTypeName[_ProviderTypeIndex[i]:_ProviderTypeIndex[i+1]]
}

var _ProviderTypeValues = []ProviderType{0, 1}

var _ProviderTypeNameToValueMap = map[string]ProviderType{
	_ProviderTypeName[0:5]: 0,
	_ProviderTypeName[5:8]: 1,
}

// ProviderTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ProviderTypeString(s string) (ProviderType, error) {
	if val, ok := _ProviderTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ProviderType values", s)
}

// ProviderTypeValues returns all values of the enum
func ProviderTypeValues() []ProviderType {
	return _ProviderTypeValues
}

// IsAProviderType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ProviderType) IsAProviderType() bool {
	for _, v := range _ProviderTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for ProviderType
func (i ProviderType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ProviderType
func (i *ProviderType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ProviderTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for ProviderType
func (i ProviderType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ProviderType
func (i *ProviderType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ProviderTypeString(s)
	return err
}
